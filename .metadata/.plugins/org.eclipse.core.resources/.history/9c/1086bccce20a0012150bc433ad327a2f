package edu.mit.ll.williams.hmm.test;

import java.util.ArrayList;

import edu.mit.ll.williams.hmm.FullHiddenMarkovModel;

public class HMMPathParser {
	
	public final static int numstates = 6;
	public final FullHiddenMarkovModel hmm;
	
	public HMMPathParser() {
		FullHiddenMarkovModel.setRandomSeed(0);
		this.hmm = FullHiddenMarkovModel.random(numstates, 256);
		
		// state set "1" is a path segment
		int[] extractStates = new int[] { 0, 1 };
		int[] otherStates = new int[] { 2, 3, 4, 5 };
		hmm.defineStateSet(1, extractStates);
		hmm.defineStateSet(0, otherStates);
	}
	
	public final static int STATE_SET_EXTRACT = 1;
	public final static int STATE_SET_OTHER = 0;
	
	public int[] parse( String path ) {

		// Turn strings into sequences of integer observations
		char[] chars = path.toCharArray();
		int[] obs = new int[chars.length];
		for( int k = 0; k < chars.length; ++k )
			obs[k] = chars[k];
		
		int[] stateEst = hmm.inferMaximumLikelihoodStates(obs);
		return stateEst;
		
	}

	public void train(ArrayList<int[]> trainingInts,
			ArrayList<int[]> stateSets) {
		
		hmm.singleBaumWelch( trainingInts, stateSets );
		
	}
	
}
