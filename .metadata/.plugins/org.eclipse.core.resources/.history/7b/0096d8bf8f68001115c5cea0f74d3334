package edu.mit.ll.div4.grp42.client;

import java.util.ArrayList;
import java.util.List;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.maps.client.MapWidget;
import com.google.gwt.maps.client.Maps;
import com.google.gwt.maps.client.control.LargeMapControl;
import com.google.gwt.maps.client.control.MapTypeControl;
import com.google.gwt.maps.client.event.MarkerDragEndHandler;
import com.google.gwt.maps.client.event.MarkerDragEndHandler.MarkerDragEndEvent;
import com.google.gwt.maps.client.geom.LatLng;
import com.google.gwt.maps.client.overlay.Icon;
import com.google.gwt.maps.client.overlay.Marker;
import com.google.gwt.maps.client.overlay.MarkerOptions;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.DockPanel;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.DoubleBox;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.HasHorizontalAlignment;
import com.google.gwt.user.client.ui.HasVerticalAlignment;
import com.google.gwt.event.dom.client.ChangeHandler;
import com.google.gwt.event.dom.client.ChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.user.client.ui.CaptionPanel;
import com.google.gwt.user.client.ui.IntegerBox;
import com.google.gwt.user.client.ui.LongBox;
import com.google.gwt.user.client.ui.HorizontalSplitPanel;
import com.google.gwt.user.client.ui.Grid;


/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
@SuppressWarnings("deprecation")
public class AircraftTrackEditorLayout implements EntryPoint {
	
	public List<AircraftTrack> trackList = new ArrayList<AircraftTrack>();
	
	private void refreshDisplay()
	{
		trackListBox.clear();
		for( int k = 0; k < trackList.size(); ++k )
		{
			trackListBox.insertItem("Track " + trackList.get(k).trackNumber, k);
		}
		
		refreshTrackControls();
		refreshMap();
	}
	
	private void refreshMap()
	{
		// Draw each track
	    MarkerOptions options = MarkerOptions.newInstance();
	    options.setBouncy(false);

		map.clearOverlays();
		for( final AircraftTrack trk : trackList )
		{
			// Initial location of the track
			LatLng trk_start = LatLng.newInstance(trk.initialLatitude_deg, trk.initialLongitude_deg);
		    
			options.setIcon( trk.icon );
			options.setDraggable(true);			
			final Marker trkStart = new Marker(trk_start,options);
			trkStart.addMarkerDragEndHandler(new MarkerDragEndHandler() {
				  final private AircraftTrack mytrack = trk;
			      public void onDragEnd(MarkerDragEndEvent event) {
			    	  mytrack.initialLatitude_deg = trkStart.getLatLng().getLatitude();
			    	  mytrack.initialLongitude_deg = trkStart.getLatLng().getLongitude();
			    	  refreshTrackControls();
			      }
			});
			map.addOverlay( trkStart );
			
			// Location of all remaining track reports
			for( AircraftTrackReport trkrep : trk.generateTrackReports() )
			{
				LatLng ll = LatLng.newInstance(trkrep.latitudeDegrees, trkrep.longitudeDegrees);
				options.setDraggable(false);
				Marker mark = new Marker(ll,options);
				map.addOverlay( mark );
			}
		}		
	}
	
	private void refreshTrackControls()
	{
		if( trackListBox.getSelectedIndex() < 0 )
		{
			this.trackPropertiesPanel.setVisible(false);
			selectedTrack = null;
		}
		else
		{
			selectedTrack = trackList.get( trackListBox.getSelectedIndex() );
			AircraftTrack trk = selectedTrack;
			
			this.trackPropertiesPanel.setVisible(true);
			initLatBox.setValue( trk.initialLatitude_deg );
			initLonBox.setValue( trk.initialLongitude_deg );
			trackNumberBox.setValue( trk.trackNumber );
			this.initHeadBox.setValue( trk.initialHeading_deg );
			this.initTimeBox.setValue( trk.initialTime.getTime() );
			this.repPeriodBox.setValue( trk.reportPeriodSec );
			
			this.segmentListBox.clear();
			for( int k = 0; k < trk.trackSegments.size(); ++k )
			{
				segmentListBox.insertItem( "Segement " + Integer.toString(k+1), k );
			}
			
			refreshSegmentControls();

		}		
	}
		
	private void refreshSegmentControls()
	{
		if( segmentListBox.getSelectedIndex() < 0 )
		{
			this.segmentPropertiesPanel.setVisible(false);
			selectedSegment = null;
		}
		else
		{
			selectedSegment = selectedTrack.trackSegments.get( segmentListBox.getSelectedIndex() );
			AircraftTrack.TrackLeg leg = selectedSegment;
						
			this.segmentPropertiesPanel.setVisible(true);
			
			this.durationBox.setValue(leg.durationSeconds);
			this.turnRateBox.setValue(leg.turnRateDegPerSec);
			this.initSpeedBox.setValue(leg.initialSpeedKts);
			this.finalSpeedBox.setValue(leg.finalSpeedKts);
			this.initAltBox.setValue(leg.initialAltitudeFtMsl);
			this.finalAltBox.setValue(leg.finalAltitudeFtMsl);

		}	
	}
	
	private DockPanel dockPanel;
	
	/**
	 * This is the entry point method.
	 */
	@SuppressWarnings("deprecation")
	public void onModuleLoad() {
		
		Maps.loadMapsApi("", "2", false, new Runnable() {
		      public void run() {
		          buildMap();
		        }
		});

		// Add the nameField and sendButton to the RootPanel
		// Use RootPanel.get() to get the entire body element
		RootPanel rootPanel = RootPanel.get();
		rootPanel.setSize("100%", "100%");
		
		dockPanel = new DockPanel();
		rootPanel.add(dockPanel, 0, 0);
		dockPanel.setSize("100%", "100%");
		
		VerticalPanel verticalPanel = new VerticalPanel();
		verticalPanel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
		dockPanel.add(verticalPanel, DockPanel.EAST);
		verticalPanel.setSize("100px", "");
		
		CaptionPanel cptnpnlNewPanel = new CaptionPanel("Track List");
		verticalPanel.add(cptnpnlNewPanel);
		
		VerticalPanel verticalPanel_1 = new VerticalPanel();
		verticalPanel_1.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_RIGHT);
		cptnpnlNewPanel.setContentWidget(verticalPanel_1);
		verticalPanel_1.setSize("100%", "3cm");
		
		trackListBox = new ListBox();
		verticalPanel_1.add(trackListBox);
		trackListBox.setWidth("100%");
		trackListBox.addChangeHandler(new ChangeHandler() {
			public void onChange(ChangeEvent event) {
				refreshTrackControls();
			}
		});
		trackListBox.setVisibleItemCount(5);
		
		Button btnNewTrack = new Button("New button");
		verticalPanel_1.add(btnNewTrack);
		btnNewTrack.addClickHandler(new ClickHandler() {
			public void onClick(ClickEvent event) {
				createNewTrack();
			}
		});
		btnNewTrack.setText("New Track");
		
		Image mapPlaceholder = new Image("mapexample.png");
		
		CaptionPanel cptnpnlNewPanel_1 = new CaptionPanel("Track Details");
		verticalPanel.add(cptnpnlNewPanel_1);
		//		dockPanel.add( mapPlaceholder, DockPanel.CENTER );
		//		mapPlaceholder.setSize("1000px", "900px");
						
				trackPropertiesPanel = new VerticalPanel();
				cptnpnlNewPanel_1.setContentWidget(trackPropertiesPanel);
				trackPropertiesPanel.setSize("5cm", "3cm");
				
				HorizontalPanel trackNumberPanel = new HorizontalPanel();
				trackNumberPanel.setSpacing(5);
				trackNumberPanel.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
				trackPropertiesPanel.add(trackNumberPanel);
				
				Label lblNewLabel_2 = new Label("Track Number");
				lblNewLabel_2.setWordWrap(false);
				trackNumberPanel.add(lblNewLabel_2);
				
				trackNumberBox = new LongBox();
				trackNumberBox.addValueChangeHandler(new ValueChangeHandler<Long>() {
					public void onValueChange(ValueChangeEvent<Long> event) {
						if( selectedTrack != null )
						{
							selectedTrack.trackNumber = event.getValue();
							refreshMap();
						}
					}
				});
				trackNumberPanel.add(trackNumberBox);
				trackNumberBox.setWidth("100%");
				
				HorizontalPanel initLatPanel = new HorizontalPanel();
				trackPropertiesPanel.add(initLatPanel);
				initLatPanel.setSpacing(5);
				initLatPanel.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
				
				Label lblNewLabel = new Label("Start Latitude");
				lblNewLabel.setWordWrap(false);
				initLatPanel.add(lblNewLabel);
				
				initLatBox = new DoubleBox();
				initLatBox.addValueChangeHandler(new ValueChangeHandler<Double>() {
					public void onValueChange(ValueChangeEvent<Double> event) {
						if( selectedTrack != null )
						{
							selectedTrack.initialLatitude_deg = event.getValue();
							refreshMap();
						}
					}
				});
				initLatPanel.add(initLatBox);
				initLatBox.setWidth("");
				
				Label lblNewLabel_1 = new Label("deg");
				initLatPanel.add(lblNewLabel_1);
				
				HorizontalPanel initLonPanel = new HorizontalPanel();
				trackPropertiesPanel.add(initLonPanel);
				initLonPanel.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
				initLonPanel.setSpacing(5);
				
				Label lblStartLongitude = new Label("Start Longitude");
				lblStartLongitude.setWordWrap(false);
				initLonPanel.add(lblStartLongitude);
				
				initLonBox = new DoubleBox();
				initLonBox.addValueChangeHandler(new ValueChangeHandler<Double>() {
					public void onValueChange(ValueChangeEvent<Double> event) {
						if( selectedTrack != null )
						{
							selectedTrack.initialLongitude_deg = event.getValue();
							refreshMap();
						}
					}
				});
				initLonPanel.add(initLonBox);
				initLonBox.setWidth("");
				
				Label label_1 = new Label("deg");
				initLonPanel.add(label_1);
				
				HorizontalPanel initHeadPanel = new HorizontalPanel();
				initHeadPanel.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
				initHeadPanel.setSpacing(5);
				trackPropertiesPanel.add(initHeadPanel);
				
				Label lblStartHeading = new Label("Start Heading");
				lblStartHeading.setWordWrap(false);
				initHeadPanel.add(lblStartHeading);
				
				initHeadBox = new DoubleBox();
				initHeadBox.addValueChangeHandler(new ValueChangeHandler<Double>() {
					public void onValueChange(ValueChangeEvent<Double> event) {
						if( selectedTrack != null )
						{
							selectedTrack.initialHeading_deg = event.getValue();
							refreshMap();
						}						
					}
				});
				initHeadPanel.add(initHeadBox);
				initHeadBox.setWidth("");
				
				Label label_2 = new Label("deg");
				initHeadPanel.add(label_2);
				
				HorizontalPanel horizontalPanel = new HorizontalPanel();
				horizontalPanel.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
				horizontalPanel.setSpacing(5);
				trackPropertiesPanel.add(horizontalPanel);
				
				Label lblStartTime = new Label("Start Time");
				lblStartTime.setWordWrap(false);
				horizontalPanel.add(lblStartTime);
				
				initTimeBox = new LongBox();
				initTimeBox.addValueChangeHandler(new ValueChangeHandler<Long>() {
					public void onValueChange(ValueChangeEvent<Long> event) {
						if( selectedTrack != null )
						{
							selectedTrack.initialTime.setTime(event.getValue());
							refreshMap();
						}										
					}
				});
				horizontalPanel.add(initTimeBox);
				initTimeBox.setWidth("");
				
				Label lblSec = new Label("sec");
				horizontalPanel.add(lblSec);
				
				HorizontalPanel horizontalPanel_1 = new HorizontalPanel();
				horizontalPanel_1.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
				horizontalPanel_1.setSpacing(5);
				trackPropertiesPanel.add(horizontalPanel_1);
				
				Label lblReportPeriod = new Label("Report Period");
				lblReportPeriod.setWordWrap(false);
				horizontalPanel_1.add(lblReportPeriod);
				
				repPeriodBox = new DoubleBox();
				repPeriodBox.addValueChangeHandler(new ValueChangeHandler<Double>() {
					public void onValueChange(ValueChangeEvent<Double> event) {
						if( selectedTrack != null )
						{
							selectedTrack.reportPeriodSec = event.getValue();
							refreshMap();
						}							
					}
				});
				horizontalPanel_1.add(repPeriodBox);
				repPeriodBox.setWidth("");
				
				Label label_3 = new Label("sec");
				horizontalPanel_1.add(label_3);
				
				CaptionPanel cptnpnlNewPanel_2 = new CaptionPanel("Track Segments");
				trackPropertiesPanel.add(cptnpnlNewPanel_2);
				cptnpnlNewPanel_2.setSize("", "");
				
				VerticalPanel verticalPanel_2 = new VerticalPanel();
				verticalPanel_2.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_RIGHT);
				cptnpnlNewPanel_2.setContentWidget(verticalPanel_2);
				verticalPanel_2.setSize("100%", "");
				
				segmentListBox = new ListBox();
				segmentListBox.addChangeHandler(new ChangeHandler() {
					public void onChange(ChangeEvent event) {
						refreshSegmentControls();
					}
				});
				verticalPanel_2.add(segmentListBox);
				segmentListBox.setSize("100%", "40");
				segmentListBox.setVisibleItemCount(5);
				
				HorizontalPanel horizontalPanel_4 = new HorizontalPanel();
				verticalPanel_2.add(horizontalPanel_4);
				
				Button btnNewButton = new Button("New Segment");
				horizontalPanel_4.add(btnNewButton);
				
				Button btnNewButton_1 = new Button("Delete Segment");
				horizontalPanel_4.add(btnNewButton_1);
				
				CaptionPanel cptnpnlNewPanel_3 = new CaptionPanel("Segment Details");
				trackPropertiesPanel.add(cptnpnlNewPanel_3);
				
				segmentPropertiesPanel = new VerticalPanel();
				cptnpnlNewPanel_3.setContentWidget(segmentPropertiesPanel);
				segmentPropertiesPanel.setSize("100%", "");
				
				VerticalPanel verticalPanel_4 = new VerticalPanel();
				segmentPropertiesPanel.add(verticalPanel_4);
				
				HorizontalPanel horizontalPanel_2 = new HorizontalPanel();
				horizontalPanel_2.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
				horizontalPanel_2.setSpacing(5);
				verticalPanel_4.add(horizontalPanel_2);
				
				Label lblDuration = new Label("Duration");
				lblDuration.setWordWrap(false);
				horizontalPanel_2.add(lblDuration);
				
				durationBox = new DoubleBox();
				durationBox.addValueChangeHandler(new ValueChangeHandler<Double>() {
					public void onValueChange(ValueChangeEvent<Double> event) {
						if( selectedSegment != null )
						{
							selectedSegment.durationSeconds = event.getValue();
							refreshMap();
						}
						
					}
				});
				horizontalPanel_2.add(durationBox);
				durationBox.setWidth("");
				
				Label label_4 = new Label("sec");
				horizontalPanel_2.add(label_4);
				
				HorizontalPanel horizontalPanel_3 = new HorizontalPanel();
				horizontalPanel_3.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
				horizontalPanel_3.setSpacing(5);
				verticalPanel_4.add(horizontalPanel_3);
				
				Label lblTurnRate = new Label("Turn Rate");
				lblTurnRate.setWordWrap(false);
				horizontalPanel_3.add(lblTurnRate);
				
				turnRateBox = new DoubleBox();
				turnRateBox.addValueChangeHandler(new ValueChangeHandler<Double>() {
					public void onValueChange(ValueChangeEvent<Double> event) {
						if( selectedSegment != null )
						{
							selectedSegment.turnRateDegPerSec = event.getValue();
							refreshMap();
						}
						
					}
				});
				horizontalPanel_3.add(turnRateBox);
				turnRateBox.setWidth("");
				
				Label lblDegPerSec = new Label("deg per sec");
				lblDegPerSec.setWordWrap(false);
				horizontalPanel_3.add(lblDegPerSec);
				
				Grid grid = new Grid(3, 4);
				grid.setCellSpacing(5);
				verticalPanel_4.add(grid);
				
				Label lblInitial = new Label("Initial");
				lblInitial.setWordWrap(false);
				grid.setWidget(0, 1, lblInitial);
				
				Label lblFinal = new Label("Final");
				lblFinal.setWordWrap(false);
				grid.setWidget(0, 2, lblFinal);
				
				Label lblNewLabel_3 = new Label("Speed");
				lblNewLabel_3.setWordWrap(false);
				grid.setWidget(1, 0, lblNewLabel_3);
				
				initSpeedBox = new DoubleBox();
				initSpeedBox.addValueChangeHandler(new ValueChangeHandler<Double>() {
					public void onValueChange(ValueChangeEvent<Double> event) {
						if( selectedSegment != null )
						{
							selectedSegment.initialSpeedKts = event.getValue();
							refreshMap();
						}						
					}
				});
				grid.setWidget(1, 1, initSpeedBox);
				initSpeedBox.setWidth("100%");
				
				finalSpeedBox = new DoubleBox();
				finalSpeedBox.addValueChangeHandler(new ValueChangeHandler<Double>() {
					public void onValueChange(ValueChangeEvent<Double> event) {
						if( selectedSegment != null )
						{
							selectedSegment.finalSpeedKts = event.getValue();
							refreshMap();
						}
					}
				});
				grid.setWidget(1, 2, finalSpeedBox);
				finalSpeedBox.setWidth("100%");
				
				Label lblKnots = new Label("knots");
				lblKnots.setWordWrap(false);
				grid.setWidget(1, 3, lblKnots);
				
				Label lblAltitude = new Label("Altitude");
				lblAltitude.setWordWrap(false);
				grid.setWidget(2, 0, lblAltitude);
				
				initAltBox = new DoubleBox();
				initAltBox.addValueChangeHandler(new ValueChangeHandler<Double>() {
					public void onValueChange(ValueChangeEvent<Double> event) {
						if( selectedSegment != null )
						{
							selectedSegment.initialAltitudeFtMsl = event.getValue();
							refreshMap();
						}
						
					}
				});
				grid.setWidget(2, 1, initAltBox);
				initAltBox.setWidth("100%");
				
				finalAltBox = new DoubleBox();
				finalAltBox.addValueChangeHandler(new ValueChangeHandler<Double>() {
					public void onValueChange(ValueChangeEvent<Double> event) {
						if( selectedSegment != null )
						{
							selectedSegment.finalAltitudeFtMsl = event.getValue();
							refreshMap();
						}
					}
				});
				grid.setWidget(2, 2, finalAltBox);
				finalAltBox.setWidth("100%");
				
				Label lblFtMsl = new Label("ft MSL");
				lblFtMsl.setWordWrap(false);
				grid.setWidget(2, 3, lblFtMsl);
				grid.getCellFormatter().setHorizontalAlignment(0, 2, HasHorizontalAlignment.ALIGN_CENTER);
				grid.getCellFormatter().setHorizontalAlignment(0, 1, HasHorizontalAlignment.ALIGN_CENTER);

	}
	
	private MapWidget map;
	private ListBox trackListBox;
	private DoubleBox initLatBox;
	private DoubleBox initLonBox;
	private VerticalPanel trackPropertiesPanel;
	
	private AircraftTrack selectedTrack = null; // The track currently selected in the track list widget
	
	private AircraftTrack.TrackLeg selectedSegment = null; // the track segment currently selected in the segment list widget
	
	@SuppressWarnings("deprecation")
	private void buildMap() {
		LatLng cawkerCity = LatLng.newInstance(39.509, -98.434);
		map = new MapWidget(cawkerCity, 2);

	    // Add some controls for the zoom level
	    map.addControl(new LargeMapControl());
	    
	    // Add standard buttons for choosing between vector map and satellite images
	    map.addControl(new MapTypeControl());		
		
		dockPanel.add( map, DockPanel.CENTER );
		map.setSize("1000px", "900px");

		// List of icons we cycle through for tracks
		trackIconList.add( Icon.newInstance("http://labs.google.com/ridefinder/images/mm_20_red.png") );
		trackIconList.add( Icon.newInstance("http://labs.google.com/ridefinder/images/mm_20_blue.png") );
		trackIconList.add( Icon.newInstance("http://labs.google.com/ridefinder/images/mm_20_green.png") );
		
		refreshDisplay();
	}

	// List of icons we cycle through for tracks
	private List<Icon> trackIconList = new ArrayList<Icon>();
	private int nextTrackIconIndex = 0;
	private LongBox trackNumberBox;
	private DoubleBox initHeadBox;
	private LongBox initTimeBox;
	private DoubleBox repPeriodBox;
	private ListBox segmentListBox;
	private VerticalPanel segmentPropertiesPanel;
	private DoubleBox durationBox;
	private DoubleBox turnRateBox;
	private DoubleBox initSpeedBox;
	private DoubleBox initAltBox;
	private DoubleBox finalSpeedBox;
	private DoubleBox finalAltBox;
	
	public void createNewTrack()
	{
		AircraftTrack trk = new AircraftTrack();
		trk.icon = trackIconList.get(nextTrackIconIndex++);
		if( nextTrackIconIndex >= trackIconList.size() ) nextTrackIconIndex=0;
		
		long greatestTrackId = 0;
		for( AircraftTrack oldtrk : trackList )
			if( oldtrk.trackNumber > greatestTrackId ) greatestTrackId = oldtrk.trackNumber; 
		trk.trackNumber = greatestTrackId+1;
		
		// New Track Starts in center of map
		trk.initialLatitude_deg = map.getCenter().getLatitude();
		trk.initialLongitude_deg = map.getCenter().getLongitude();
		
		trackList.add(trk);
		refreshDisplay();
		trackListBox.setSelectedIndex( trackList.size()-1 );
		refreshTrackControls();
	}
	
}
