/**
 * 
 */
package edu.mit.ll.CDRS;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * @author ri18384
 *
 */
public abstract class DiscreteTimeSimulation implements Runnable {

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * A quantity of interest that is saved at each time in the simulation
	 * @author ri18384
	 *
	 */
	protected abstract class Metric
	{
		public Metric( String name )
		{
			// register this metric with the simulation
			metrics.put(name, this);
		}
		
		public abstract double calculate();
	}
	
	private HashMap<String,Metric> metrics = new HashMap<String,Metric>();
	
	/**
	 * The simulation repeatedly calls determineAction() and then advanceTime() on all of its entities
	 * @author ri18384
	 *
	 */
	public abstract class SimulatedEntity
	// Why static inner class?  Why not regular inner class so that we can directly add ourselves
	// to the entities list?
	// Because then any 
	{
		protected SimulatedEntity() // DiscreteTimeSimulation sim )
		{
			entities.add(this);
			//sim.entities.add(this);
		}
		
		abstract public void determineAction();
		
		abstract public void advanceTime();
		
		abstract public double getTimeStep();
	}
	
	/**
	 * Set the initial state of all simulated entities
	 */
	protected abstract void initialize();
	
	final private ArrayList<SimulatedEntity> entities = new ArrayList<SimulatedEntity>();
	
	public class Results
	{
		double[] times = null;
		Map<Metric,double[]> metrics = new HashMap<Metric,double[]>();
	}
	
	public Results results = null;
	
}
