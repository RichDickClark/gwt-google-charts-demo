package com.flyingsloth.financial.data;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.MalformedURLException;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import com.mysql.jdbc.exceptions.jdbc4.CommunicationsException;

public class UnitTest {

	public static void setProxy()
	{
		System.setProperty("http.proxyHost","155.34.234.20");
		System.setProperty("http.proxyPort", "8080");
	}
	
	/**
	 * @param args
	 * @throws InterruptedException 
	 * @throws SQLException 
	 */
	public static void main(String[] args) 
	throws ParsingFailedException, java.net.ConnectException, java.text.ParseException, 
		FileNotFoundException, IOException, InterruptedException, SQLException {
				
//		JDBCDataSource assetdb = new JDBCDataSource();
//			JDBCDataSource.createTables();
//			System.out.println( "Hello World!" );

//		Date d = new Date( 2011-1900, 07, 03 );
//		java.sql.Date sqld = new java.sql.Date( d.getTime() );
//		System.out.println( d );
//		System.out.println( sqld.toString() );
		
//		//JDBCDataSource assetdb = new JDBCDataSource();
//		long starttime = System.currentTimeMillis();		
//		AssetHistorySource yahoo = new YahooDataSource();
//		AssetHistory hist = yahoo.getAsset("AAAAX");
//		long endtime = System.currentTimeMillis();		
//		System.out.println(hist);
//		System.out.println( "Time Elapsed: " + (endtime-starttime)/1000.0 );
//		starttime = System.currentTimeMillis();
//		assetdb.add(hist);
//		endtime = System.currentTimeMillis();
//		System.out.println( "Time Elapsed: " + (endtime-starttime)/1000.0 );

//		AssetHistorySource yahoo = new YahooDataSource();
//		AssetHistorySource assetdb = new JDBCDataSource();
//		AssetHistorySource src;
//		AssetHistory hist;
//		long starttime, endtime;
//		// How long to get from Yahoo?
//		src = yahoo;
//		starttime = System.currentTimeMillis();
//		hist = src.getAsset("AAAAX");
//		endtime = System.currentTimeMillis();		
//		System.out.println( "Yahoo: " + (endtime-starttime)/1000.0  + " seconds" );
//		// How long from the local database?
//		src = assetdb;
//		starttime = System.currentTimeMillis();
//		hist = src.getAsset("AAAAX");
//		endtime = System.currentTimeMillis();		
//		System.out.println( "database: " + (endtime-starttime)/1000.0  + " seconds" );
				
//		long starttime = System.currentTimeMillis();		
//		Collection<DateDouble> prices = YahooDataSource.getClosingPrices("MSFT", new Date(1990,0,1), new Date(2011,6,24) );
//		long endtime = System.currentTimeMillis();
//		System.out.println( "Time Elapsed: " + (endtime-starttime)/1000.0 );
		
//		DateDoubleList list = new com.flyingsloth.financial.data.DateDoubleList( com.flyingsloth.financial.data.YahooDataSource.getClosingPrices("A") );

		
//		starttime = System.currentTimeMillis();		
//		YahooDataSource.getClosingPrices("MSFT");
//		endtime = System.currentTimeMillis();
//		for( double p : prices )
//			System.out.println( p );
//		System.out.println( "Time Elapsed: " + (endtime-starttime)/1000.0 );
		
		
//		Collection<DateDouble> divs = YahooDataSource.getDividends("MSFT", new Date(1990,0,1), new Date(2011,6,24) );
//		System.out.println(divs);
		
//		System.out.println( YahooDataSource.getInitialDate("MSFT") );
		//YahooPriceData price = YahooDataSource.getPrice("MCD","2010","09","02");
		//System.out.println( price );
		//DateDoubleList divlist = new DateDoubleList( YahooDataSource.getDividends("MSFT") );
		//ObjectOutputStream file = new ObjectOutputStream( new FileOutputStream( "MSFTdiv.ddl" ) );
		//file.writeObject(divlist);
		//java.util.Date[] dates = divlist.getDates();
		//double[] values = divlist.getValues();
		
		//DateDoubleList pricelist = new DateDoubleList( YahooDataSource.getClosingPrices("MSFT") );
		//System.out.println( pricelist );
		
//		String[] symbols = new String[3];
//		symbols[0] = "MSFT";
//		symbols[1] = "BOB";
//		symbols[2] = "FFFFX";
//		saveAssetHistories( "testassets.ahl", symbols );			
		
		//System.out.println( YahooDataSource.getClosingPrices("MSFT") );

//		// Save historical prices and dividends to files
//		SymbolList syms = new SymbolList( "USMF.txt" );			
//		int k = 10000;
//		while( k < syms.symbols.length )
//		{
//			long starttime = System.currentTimeMillis();
//			int firstindex = k;
//			int lastindex = Math.min( k+4999, syms.symbols.length-1 );
//			String filename = "USMF_" + (firstindex+1) + "-" + (lastindex+1) + ".ahl"; 
//			saveAssetHistories( filename, Arrays.copyOfRange(syms.symbols, firstindex, lastindex+1 ) );
//			long endtime = System.currentTimeMillis();
//			System.out.println( "Time Elapsed: " + (endtime-starttime)/1000.0 );
//		}
		
		// Save historical prices and dividends to local database
//		{
//			JDBCDataSource assetdb = new JDBCDataSource();
//			assetdb.clear();
//		}
		
//		SymbolList syms = new SymbolList( "USMF.txt" );		
//		long starttime = System.currentTimeMillis();
//		//addToAssetDatabase( Arrays.copyOfRange(syms.symbols, 0, 10 ) );
//		addToAssetDatabase( syms.symbols );
//		long endtime = System.currentTimeMillis();
//		System.out.println( "Time Elapsed: " + (endtime-starttime)/1000.0 );				

//		// Start after PTACX
//		SymbolList syms = new SymbolList( "USMF.txt" );
//		int n = Arrays.binarySearch(syms.symbols, "PTACX");
//		long starttime = System.currentTimeMillis();
//		//addToAssetDatabase( Arrays.copyOfRange(syms.symbols, 0, 10 ) );
//		addToAssetDatabase( Arrays.copyOfRange(syms.symbols, n+1, syms.symbols.length) );
//		long endtime = System.currentTimeMillis();
//		System.out.println( "Time Elapsed: " + (endtime-starttime)/1000.0 );
		
//		JDBCDataSource assetdb = new JDBCDataSource();
//		AssetHistory hist = assetdb.getAsset("AAAAX");
//		hist.calcCumulativeDividends();
//		assetdb.update(hist);
		
//		JDBCDataSource assetdb = new JDBCDataSource();
//		String[] symbols = assetdb.getSymbols();
//		int n = Arrays.binarySearch(symbols, "TLIPX");
//		addSplitsToAssetDatabase( Arrays.copyOfRange(symbols, n, symbols.length) );
		
//		YahooDataSource yahoo = new YahooDataSource();
//		AssetHistory asset = yahoo.getAsset("MSFT");
//		// Check that it has split values other than 1!
//		for( int k = 1; k < asset.split.length; ++k )
//		{
//			if( asset.split[k]!=1.0 )
//				System.out.println( asset.date[k] + " " + asset.split[k] );
//		}
//		System.out.println( "All splits examined for " + asset.symbol );

		testWealthFactor();

	}

//	public static void saveAssetHistories( String filename, String[] symbols ) throws FileNotFoundException, IOException, InterruptedException {
//		//final int NUMTHREADS = 2*Runtime.getRuntime().availableProcessors();
//		final int NUMTHREADS = 50;
//		final ExecutorService executor = Executors.newFixedThreadPool(NUMTHREADS);
//		
//		final ArrayList<AssetHistory> assets = new ArrayList<AssetHistory>( symbols.length );
//		for( final String symbol : symbols )
//		{
//			executor.execute( new Runnable() {
//				public void run() {
//					
//					System.out.println( symbol );
//					AssetHistory asset = new AssetHistory();
//					asset.symbol = symbol;
//					try
//					{
//						asset.dividends = new DateDoubleList( YahooDataSource.getDividends(symbol) );
//						asset.close = new DateDoubleList( YahooDataSource.getClosingPrices(symbol));
//						// Don't want multiple threads trying to add to the list simultaneously
//						synchronized(assets)
//						{
//							assets.add( asset );
//						}
//					}
//					catch( Exception e )
//					{
//						System.err.println( "Exception while retrieving data for " + symbol + ": " + e );
//					}
//					
//				}
//			} );
//		}
//		// Don't save to disk until we've filled up the list with asset data!
//		executor.shutdown();
//		executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);
//		ObjectOutputStream file = new ObjectOutputStream( new FileOutputStream( filename ) );
//		file.writeObject(assets);
//	}
	
	public static AssetHistory[] loadAssetHistories( String filename ) throws FileNotFoundException, IOException, ClassNotFoundException {
		ObjectInputStream file = new ObjectInputStream( new FileInputStream( filename ) );
		@SuppressWarnings("unchecked")
		ArrayList<AssetHistory> list = (ArrayList<AssetHistory>) file.readObject();
		return list.toArray(new AssetHistory[0]);
	}
	
	public static void addToAssetDatabase(String[] symbols) throws SQLException, NumberFormatException, ParseException, IOException, InterruptedException
	{
		AssetHistorySource src = new YahooDataSource();
		JDBCDataSource dest = new JDBCDataSource();
		for( String sym : symbols )
		{
			// If the socket connection fails, wait a few seconds and try again
			// up to a 100 reattempts
			AssetHistory hist = null;
			boolean success = false;
			int numfails = 0;
			while( !success )
			{
				try{
				hist = src.getAsset(sym);
				success = true;
				}
				catch(java.net.SocketTimeoutException e)
				{					
					if( ++numfails > 100 )
						throw e;	
					synchronized(src)
					{
						src.wait(10000);
					}
				}
			}
			dest.add( hist );
		}
	}	
	
	public static void addSplitsToAssetDatabase(String[] symbols) throws SQLException, InterruptedException, NumberFormatException, MalformedURLException, ParseException, SocketTimeoutException
	{
		YahooDataSource src = new YahooDataSource();
		JDBCDataSource assetdb = new JDBCDataSource();
		for ( String sym : symbols )
		{
			System.out.println(sym);
			
			// GET SPLITS FROM YAHOO
			// If the socket connection fails, wait a few seconds and try again
			// up to a 100 re-attempts
			Collection<DateDouble> splits = null;
			boolean success = false;
			int numfails = 0;
			while( !success )
			{
				try{
				splits = src.getSplits(sym);
				success = true;
				}
				catch(java.net.SocketTimeoutException e)
				{					
					if( ++numfails > 100 )
						throw e;
					System.err.println(e);
					synchronized(src)
					{
						src.wait(10000);
					}
				}
			}
			
			// ADD SPLITS TO DATABASE
			success = false;
			numfails = 0;
			while( !success )
			{
				try
				{
					assetdb.setSplits(sym,splits);
					success = true;
				}
				catch(CommunicationsException e)
				{
					if( ++numfails > 100 )
						throw e;
					System.err.println(e);
					synchronized(assetdb)
					{
						assetdb.wait(1000);
					}
				}
			}
		}	
	}
	
	/**
	 * Confirm that we can create an asset table in the database and add asset histories to it
	 * @throws SQLException 
	 * @throws IOException 
	 * @throws ParseException 
	 * @throws NumberFormatException 
	 */
	public static void testCreateAndInsert() throws SQLException, NumberFormatException, ParseException, IOException {
		JDBCDataSource assetdb = new JDBCDataSource("TestTable");
		assetdb.createTables();
		AssetHistorySource yahoo = new YahooDataSource();
		AssetHistory asset = yahoo.getAsset( "AAAAX" );
		System.out.println( asset );
		assetdb.add(asset);		
	}
	
	public static void testGetYahooSplits() throws NumberFormatException, SocketTimeoutException, MalformedURLException, ParseException {
		System.out.println("GMOCX");
		System.out.println( YahooDataSource.getSplits( "GMOCX" ) );
		System.out.println("MSFT");
		System.out.println( YahooDataSource.getSplits( "MSFT" ) );
		System.out.println("DODGX");
		System.out.println( YahooDataSource.getSplits( "DODGX" ) );		
		System.out.println("ACE");
		System.out.println( YahooDataSource.getSplits( "ACE" ) );		
		System.out.println("NOC");
		Collection<DateDouble> splits = YahooDataSource.getSplits( "NOC" );
		System.out.println( splits );
		// Make sure we got split from second page of dividends
		if( splits.size() != 2 )
			throw new RuntimeException( "TEST FAILED" );
	}
	
	public static void testHasEntry() throws SQLException {
		JDBCDataSource assetdb = new JDBCDataSource();
		if( !assetdb.hasEntry("AAAAX", new Date(2007-1900,7,15)) )
			throw new RuntimeException( "TEST FAILED" );
		if( assetdb.hasEntry("AAAAX", new Date(1950-1900,7,15)) )
			throw new RuntimeException( "TEST FAILED" );
	}
	
	public static void testGetAsset() throws SQLException, NumberFormatException, ParseException, IOException {
		JDBCDataSource assetdb = new JDBCDataSource();
		long starttime = System.currentTimeMillis();
		AssetHistory asset = assetdb.getAsset( "GMOCX" );
		asset = assetdb.getAsset( "AAAAX" );
		asset = assetdb.getAsset( "FFFFX" );		
		long endtime = System.currentTimeMillis();
		System.out.println( "Time Elapsed: " + (endtime-starttime)/1000.0 );
	}
	
	public static void testGetAssetDateRange() throws NumberFormatException, ParseException, IOException, SQLException
	{
		JDBCDataSource assetdb = new JDBCDataSource();
		AssetHistory asset = assetdb.getAsset( "GMOCX", new Date(2011-1900,7,1), new Date(2011-1900,8,1) );
		System.out.println( asset );
		YahooDataSource yahoo = new YahooDataSource();
		asset = yahoo.getAsset("GMOCX", new Date(2011-1900,7,1), new Date(2011-1900,8,1));
		System.out.println( asset );		
	}
	
	public static void updateAssetDatabase() throws SQLException, NumberFormatException, IOException, ParseException 
	{
		JDBCDataSource assetdb = new JDBCDataSource();
		YahooDataSource yahoo = new YahooDataSource();
		for( String symbol : assetdb.getSymbols() )
		{
			if( symbol.compareTo("MLRRX	") >= 0 )
			{
				System.out.println( symbol );
				AssetHistory asset = null;
				int numfails = 0;
				while( asset==null )
				{
					try{
					asset = yahoo.getAsset(symbol, new Date(2011-1900,7,1), new Date(2011-1900,8,1));
					}
					catch(java.net.SocketTimeoutException e)
					{					
						if( ++numfails > 100 )
							throw e;
						System.err.println(e);
						synchronized(yahoo)
						{
							try {
								yahoo.wait(1000);
							} catch (InterruptedException e1) {
							}
						}
					}
				}
				assetdb.add( asset );
			}
		}
	}
	
	public static void testWealthFactor() throws SQLException
	{
		JDBCDataSource db = new JDBCDataSource();
		System.out.println( db.wealthFactor("GSBTX", new Date( 2008-1900, 10, 20 ), new Date( 2011-1900, 4, 19 )) );
	}
	
}
