/**
 * 
 */
package edu.mit.ll.CDRS;

import edu.mit.ll.CASSATT.EstimatedAircraftState;
import edu.mit.ll.CASSATT.LogicAdvisory;

/**
 * Creates an ArbitraryTime logic from a FixedTime logic by invoking logic at the expected times 
 * and "saving and holding" inputs and outputs as necessary.  
 * 
 * Possible Issue: if logic hasn't been run for several of the periods assumed by the underlying 
 * logic, it will call the FixedTime implementation multiple times, possibly making it seem to 
 * the logic that it has been issuing an alert for longer than it truly has.
 * @author ri18384
 */
public class ConflictResolutionLogicRateTransition extends
		ArbitraryTimeConflictResolutionLogic {

	/**
	 * @param clock the source of current time the logic should use
	 */
	public ConflictResolutionLogicRateTransition( FixedTimeConflictResolutionLogic logic, TimeSource clock) {
		super(clock);
		this.logic = logic;
	}
	
	private FixedTimeConflictResolutionLogic logic;
	private Time timeLastRun = getTime();

	/* (non-Javadoc)
	 * @see edu.mit.ll.CDRS.ConflictResolutionLogic#initialize()
	 */
	@Override
	public void initialize() {
		logic.initialize();
		timeLastRun = getTime();
	}

	/* (non-Javadoc)
	 * @see edu.mit.ll.CDRS.ConflictResolutionLogic#setOwnship(edu.mit.ll.CASSATT.EstimatedAircraftState)
	 */
	@Override
	public void setOwnship(EstimatedAircraftState ownship) throws InvalidDimensionsException {
		//checkTimeElapsed();
		// We may not have set the ownship on the underlying logic yet,
		// in which case it makes no sense to ask it to compute an advisory.  
		logic.setOwnship(ownship);
	}

	/* (non-Javadoc)
	 * @see edu.mit.ll.CDRS.ConflictResolutionLogic#addIntruder(edu.mit.ll.CASSATT.EstimatedAircraftState)
	 */
	@Override
	public void addIntruder(EstimatedAircraftState intruder) throws Exception {
		checkTimeElapsed();
		logic.addIntruder(intruder);
	}

	/* (non-Javadoc)
	 * @see edu.mit.ll.CDRS.ConflictResolutionLogic#removeIntruder(edu.mit.ll.CASSATT.EstimatedAircraftState)
	 */
	@Override
	public void removeIntruder(EstimatedAircraftState intruder) throws InvalidDimensionsException {
		checkTimeElapsed();
		logic.removeIntruder(intruder);
	}

	private LogicAdvisory latestAdvisory = LogicAdvisory.createClearOfConflict();
	
	/* (non-Javadoc)
	 * @see edu.mit.ll.CDRS.ConflictResolutionLogic#computeAdvisory()
	 */
	@Override
	public LogicAdvisory computeAdvisory() throws InvalidDimensionsException {
		checkTimeElapsed();
		return latestAdvisory;
	}
	
	/**
	 * Check if enough time has elapsed that we should have run the logic 
	 * @throws InvalidDimensionsException 
	 */
	private void checkTimeElapsed() throws InvalidDimensionsException {
		Time sinceLast = null;
		if( timeLastRun!=null ) {
			sinceLast =  getTime().sub( timeLastRun );
		}
		else {
			sinceLast = new Time( Long.MAX_VALUE, Long.MAX_VALUE );
		}
				
		if( sinceLast.greaterThanOrEqualTo( logic.getAssumedPeriod() ) )
		{
			timeLastRun = getTime();
			latestAdvisory = logic.computeAdvisory();
		}
	}

}
