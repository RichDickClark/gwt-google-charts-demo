package com.flyingsloth.financial.data;

import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class UpdateAssetDatabase {

	/**
	 * @param args
	 * @throws InterruptedException 
	 * @throws ParseException 
	 * @throws IOException 
	 * @throws SQLException 
	 * @throws NumberFormatException 
	 */
	public static void main(String[] args) throws NumberFormatException, SQLException, IOException, ParseException, InterruptedException {
		
		updateAssetDatabase_parallel();
	}
	
	private static Date startdate;
	private static Date enddate;

	public static void updateAsset( String symbol, JDBCDataSource assetdb ) throws NumberFormatException, IOException, ParseException, SQLException
	{
		YahooDataSource yahoo = new YahooDataSource();
		System.out.println( symbol );
		AssetHistory asset = null;
		int numfails = 0;
		while( asset==null )
		{
			try{
			asset = yahoo.getAsset(symbol, startdate, enddate);
			}
			catch(java.net.SocketTimeoutException e)
			{					
				if( ++numfails > 100 )
					throw e;
				System.err.println(e);
				synchronized(yahoo)
				{
					try {
						yahoo.wait(1000);
					} catch (InterruptedException e1) {
					}
				}
			}
			catch(IOException e)
			{					
				if( ++numfails > 100 )
					throw e;
				System.err.println(e);
				synchronized(yahoo)
				{
					try {
						yahoo.wait(1000);
					} catch (InterruptedException e1) {
					}
				}
			}
			
		}
		synchronized(assetdb)
		{
			assetdb.add( asset );
		}
	}
	
	public static void updateAssetDatabase() throws SQLException, NumberFormatException, IOException, ParseException 
	{
		JDBCDataSource assetdb = new JDBCDataSource();
		for( String symbol : assetdb.getSymbols() )
		{
//			if( symbol.compareTo("MLRRX	") >= 0 )
			{
				updateAsset( symbol, assetdb );
			}
		}
	}
	
	public static void updateAssetDatabase_parallel( ) throws SQLException, NumberFormatException, IOException, ParseException, InterruptedException  
	{
	final int NUMTHREADS = 4;
	final ExecutorService executor = Executors.newFixedThreadPool(NUMTHREADS);
	
	final JDBCDataSource assetdb = new JDBCDataSource();
	for( final String symbol : assetdb.getSymbols() )
	{
//		if( symbol.compareTo("ARDDX") >= 0 )
		{
			executor.execute( new Runnable() {
				public void run() {
					
					try {
						updateAsset( symbol, assetdb );
					} catch (NumberFormatException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}
			} );
		}
	}
	// Don't save to disk until we've filled up the list with asset data!
	executor.shutdown();
	executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);
	}	
	
}
