package edu.mit.ll.irbenchmark;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;

/**
 * A collection of TruthData generated by fusing
 * multiple survey responses.  Note that when 
 * TruthData objects are added to a TruthDataset,
 * one must explicitly call addTopicRelevanceTruthData()
 * as opposed to just addTruthData() for those questions
 * that pertain to the relevance of a document to a
 * particular topic.  
 * @author Clark Williams
 *
 */
@Entity
public class TruthDataset {

	
	/**
	 * Retrieve the most recently saved TruthDataset
	 * @return
	 */
	public static TruthDataset loadLatest( CorpusName corpus ) {
		return SocialMediaBenchmarksDatabase.loadLatestTruthDataset(corpus);
	}
	
	/**
	 * Return how relevance a given document is to a topic of interest according to this truth dataset
	 * @param documentId unique identifier of a document from the corpus
	 * @param topic topic of interest 
	 * @return value from 0.0 to 1.0 giving relevance to topic, or null if this dataset doesn't contain that information
	 */
	public Double getTopicRelevanceTruthData( long documentId, Topic topic ) {
		TopicRelevanceTruthData truth = this.topicRelevanceTruthData.get(new DocTopic(documentId,topic));
		if( truth==null )
			return null;
		return truth.getRelevance();
	}
	
	/**
	 * Provide the estimated true answer to one of the survey 
	 * questions on how relevance a document is to a particular
	 * topic of interest.  
	 * @param documentId unique identifier of a document
	 * @param questionNumber number of a question from the survey (valid values 1 through 6)
	 * @param answer estimated correct response to that question (valid values 1.0 through 5.0)
	 * @param topic which topic of interest the question is asking about
	 */
	public void addTopicRelevanceTruthData( long documentId, int questionNumber, Topic topic, double answer ) {
		TopicRelevanceTruthData truth = new TopicRelevanceTruthData( this, documentId, questionNumber, topic, answer );
		truthData.put( new DocQuestion(documentId,questionNumber), truth);
		topicRelevanceTruthData.put( new DocTopic(documentId,topic), truth );
	}

	/**
	 * Provide the estimated true answer to a question on the survey,
	 * corresponding to a particular facet of the a document.
	 * Note that for questions pertaining to topic relevance
	 * method addTopicRelevanceTruthData should be called instead.  
	 * @param documentId unique identifier of a document
	 * @param questionNumber number of a question from the survey (valid values 1 through 11)
	 * @param answer estimated correct response to that question (valid values 1.0 through 5.0)
	 */
	public void addTruthData( long documentId, int questionNumber, double answer ) {
		truthData.put( new DocQuestion(documentId,questionNumber), new TruthData(this, documentId, questionNumber, answer) );		
	}
	
	@Id
	@GeneratedValue
	private long id;
	
	@Column(nullable=false)
	private CorpusName corpus;
	
	public CorpusName getCorpus() {
		return corpus;
	}

	@Column(nullable=false)
	private Date creationDate = new Date();
	
	@Embeddable
	private static class DocQuestion {
		public DocQuestion( long documentId, int questionNumber ) {
			this.documentId = documentId;
			this.questionNumber = questionNumber;
		}
		private long documentId;
		private int questionNumber;
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + (int) (documentId ^ (documentId >>> 32));
			result = prime * result + questionNumber;
			return result;
		}
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			DocQuestion other = (DocQuestion) obj;
			if (documentId != other.documentId)
				return false;
			if (questionNumber != other.questionNumber)
				return false;
			return true;
		}
	}
	
	/**
	 * Truth data indexed by document id and question number
	 */
	@OneToMany	
	private Map<DocQuestion,TruthData> truthData = new HashMap<DocQuestion,TruthData>();
	
	@Embeddable
	private static class DocTopic {
		public DocTopic(long documentId, Topic topic) {
			super();
			this.documentId = documentId;
			this.topic = topic;
		}
		private long documentId;
		private Topic topic;
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + (int) (documentId ^ (documentId >>> 32));
			result = prime * result + ((topic == null) ? 0 : topic.hashCode());
			return result;
		}
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			DocTopic other = (DocTopic) obj;
			if (documentId != other.documentId)
				return false;
			if (topic != other.topic)
				return false;
			return true;
		}
		
	}

	/**
	 * Truth data on document relevance to topics of interest
	 */
	@OneToMany
	private Map<DocTopic,TopicRelevanceTruthData> topicRelevanceTruthData = new HashMap<DocTopic,TopicRelevanceTruthData>();
	
}
