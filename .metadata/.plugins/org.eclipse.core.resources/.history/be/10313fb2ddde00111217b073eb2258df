/**
 * 
 */
package edu.mit.ll.irbenchmark;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Collection;
import java.util.Properties;

import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.SimpleExpression;
import org.hibernate.tool.hbm2ddl.SchemaExport;
import org.hibernate.tool.hbm2ddl.SchemaUpdate;

import edu.mit.ll.irbenchmark.amt.SurveyResponse;
import edu.mit.ll.irbenchmark.amt.Turker;

/**
 * @author Clark Williams
 * Link to the Social Media Benchmarks MySQL Database.  Requires that a properties file named
 * SocialMediaBenchmarksDatabase.properties exist in the current directory containing values 
 * for "login" and "password".
 */
public class SocialMediaBenchmarksDatabase {
	
	/**
	 * Create a connection to the database, or return the existing one
	 * @return
	 * @throws IOException 
	 * @throws FileNotFoundException  
	 * @throws SQLException 
	 */
	public static Connection getConnection() throws RuntimeException {
		try {
		if( connection==null ) {
			Properties properties = new Properties();
			properties.load( new FileInputStream("SocialMediaBenchmarksDatabase.properties") );
			connection = DriverManager.getConnection("jdbc:mysql://gp42-mysql/" + properties.getProperty("schema"), properties.getProperty("login"), properties.getProperty("password"));
		}
		return connection;
		} catch( Exception e ) {
			throw new RuntimeException(e);
		}
	}
	
	private static Connection connection = null;
	
	private static Configuration config;
	private static SessionFactory hibernate;
	
	static {
		config = new Configuration();
		config.addAnnotatedClass(IRSystemRun.class);
		config.addAnnotatedClass(EvaluationMetrics.class);
		config.addAnnotatedClass(SurveyResponse.class);
		config.addAnnotatedClass(Turker.class);
		config.addAnnotatedClass(TruthData.class);
		config.addAnnotatedClass(TopicRelevanceTruthData.class);
		config.addAnnotatedClass(TruthDataset.class);
		config.configure( "hibernate.cfg.xml" );
		hibernate = config.buildSessionFactory();		
		hibernate.getCurrentSession().beginTransaction();
	}
	
	/**
	 * Save all objects previously passed to save methods to the database
	 */
	public static void commit() {
		hibernate.getCurrentSession().getTransaction().commit();
		// start next transaction right away
		hibernate.getCurrentSession().beginTransaction();
	}

	/**
	 * Create tables in database for storing persistent objects.
	 * !!!WARNING - Deletes any data in existing tables!!!
	 */
	public static void createTables() {		
		// create the tables in the database
		new SchemaExport(config).create( true, true );		
	}
	
	/**
	 * Attempt to make any necessary alterations to the database
	 * schema while maintaining existing data
	 */
	public static void updateTables() {
		new SchemaUpdate(config).execute(true, true);
	}
	
	/**
	 * Mark a RunResult object for insertion into the database at next call to commit
	 */
	public static void save( IRSystemRun obj ) {
		hibernate.getCurrentSession().save(obj);
	}
	
	/**
	 * Mark a RunResult object for deletion from the database at next call to commit
	 */
	public static void delete( IRSystemRun obj ) {
		hibernate.getCurrentSession().delete(obj);
	}
	
	public static IRSystemRun loadRunResults( int id ) {
		// load can return a proxy object that loads the actual data from the database only
		// once one of the methods of the object are called.  This doesn't work for objects
		// with public fields, so using get instead.  
//		return (RunResult) hibernate.getCurrentSession().load( RunResult.class, new Integer(id) );
		return (IRSystemRun) hibernate.getCurrentSession().get( IRSystemRun.class, new Integer(id) );
	}
	
	/**
	 * Mark a SurveyResponse object for insertion into the database at next call to commit
	 */
	public static void save( SurveyResponse obj ) {
		hibernate.getCurrentSession().save(obj);
	}
	
	/**
	 * Mark a RunResult object for deletion from the database at next call to commit
	 */
	public static void delete( SurveyResponse obj ) {
		hibernate.getCurrentSession().delete(obj);
	}
	
	public static SurveyResponse loadSurveyResponse( int id ) {
		return (SurveyResponse) hibernate.getCurrentSession().get( SurveyResponse.class, new Integer(id) );
	}
	
	/**
	 * Get all survey responses that are stored in the database
	 * @return a collection of survey responses
	 */
	@SuppressWarnings("unchecked")
	public static Collection<SurveyResponse> loadSurveyResponses() {
		return hibernate.getCurrentSession().createCriteria( SurveyResponse.class ).list();
	}
	
	public static TruthDataset loadLatestTruthDataset(CorpusName corpus) {		
		Query q = hibernate.getCurrentSession().createQuery("FROM TruthDataset WHERE corpus=" + corpus.ordinal() + " ORDER BY creationDate DESC");
		q.setMaxResults(1);
		return (TruthDataset) q.list().get(0);
		
		
	}	
	
	/**
	 * Mark a Turker object for insertion into the database at next call to commit
	 */
	public static void save( Turker obj ) {
		hibernate.getCurrentSession().save(obj);
	}
	
	/**
	 * Mark a EvaluationMetrics object for insertion into the database at next call to commit
	 */
	public static void save( EvaluationMetrics obj ) {
		hibernate.getCurrentSession().save(obj);
	}
	
	public static void main(String[] args) {
		//updateTables();
		createTables();
	}
	
}
